import os

env = Environment(CCFLAGS = '')
guienv = Environment(CPPFLAGS = '')

env = Environment(CCFLAGS = os.environ['CXXFLAGS'])
env = Environment(LDFLAGS = os.environ['LDFLAGS'])
env['LIBS'] = ['m']
conf = Configure(env)

if not conf.CheckLibWithHeader('jack', 'jack/jack.h','c'):
	print('Did not find jack, exiting!')
	Exit(1)
if not conf.CheckLibWithHeader('lo', 'lo/lo.h','c'):
	print('Did not find liblo for OSC, exiting!')
	Exit(1)
if not conf.CheckLibWithHeader('asound', 'alsa/asoundlib.h','c'):
	print('Did not find alsa, exiting!')
	Exit(1)
if not conf.CheckLibWithHeader('pthread', 'pthread.h','c'):
	print('Did not find pthread library, exiting!')
	Exit(1)
env = conf.Finish()

guiconf = Configure(guienv)
if not guiconf.CheckLibWithHeader('lo', 'lo/lo.h','c'):
	print('Did not find liblo for OSC, exiting!')
	Exit(1)
if not guiconf.CheckLibWithHeader('fltk', 'FL/Fl.H','c++'):
	print('Did not find FLTK for the gui, exiting!')
	Exit(1)
if not guiconf.CheckLibWithHeader('asound', 'alsa/asoundlib.h','c'):
	print('Did not find alsa, exiting!')
	Exit(1)
if not guiconf.CheckLibWithHeader('pthread', 'pthread.h','c'):
	print('Did not find pthread library, exiting!')
	Exit(1)
guienv = guiconf.Finish()
guienv.Append(CPPFLAGS = os.environ['CXXFLAGS'])
guienv.Append(LDFLAGS = os.environ['LDFLAGS'])

env.Append(CPPFLAGS = os.environ['CXXFLAGS'])
env.Append(LDFLAGS = os.environ['LDFLAGS'])
env.Program('minicomputerCPU','cpu/main.c');

guienv.Program('minicomputer',['editor/main.cpp','editor/Memory.cpp','editor/syntheditor.cxx']);

env.Alias(target="install", source=env.Install(dir="/usr/bin", source="minicomputer"));
env.Alias(target="install", source=env.Install(dir="/usr/bin", source="minicomputerCPU"));
