From 60893f657a0834de481f7c7a4fda95fae8724ad1 Mon Sep 17 00:00:00 2001
From: Yann Collette <ycollette.nospam@free.fr>
Date: Thu, 19 Sep 2024 07:02:20 +0200
Subject: [PATCH] remove asprintf

---
 jack_capture.c | 49 -------------------------------------------------
 1 file changed, 49 deletions(-)

diff --git a/jack_capture.c b/jack_capture.c
index b2d15a1..5f2313c 100644
--- a/jack_capture.c
+++ b/jack_capture.c
@@ -899,55 +899,6 @@ static void stop_helper_thread(void){
 //////////////////////// DISK Thread hooks //////////////////////////
 /////////////////////////////////////////////////////////////////////
 
-
-#ifndef __USE_GNU
-/* This code has been derived from an example in the glibc2 documentation.
- * "asprintf() implementation for braindamaged operating systems"
- * Copyright (C) 1991, 1994-1999, 2000, 2001 Free Software Foundation, Inc.
- */
-#ifdef _WIN32
-#define vsnprintf _vsnprintf
-#endif
-#ifndef __APPLE__
-int asprintf(char **buffer, char *fmt, ...) {
-    /* Guess we need no more than 200 chars of space. */
-    int size = 200;
-    int nchars;
-    va_list ap;
-
-    *buffer = (char*)malloc(size);
-    if (*buffer == NULL) return -1;
-
-    /* Try to print in the allocated space. */
-    va_start(ap, fmt);
-    nchars = vsnprintf(*buffer, size, fmt, ap);
-    va_end(ap);
-
-    if (nchars >= size)
-    {
-        char *tmpbuff;
-        /* Reallocate buffer now that we know how much space is needed. */
-        size = nchars+1;
-        tmpbuff = (char*)realloc(*buffer, size);
-
-        if (tmpbuff == NULL) { /* we need to free it*/
-            free(*buffer);
-            return -1;
-        }
-
-        *buffer=tmpbuff;
-        /* Try again. */
-        va_start(ap, fmt);
-        nchars = vsnprintf(*buffer, size, fmt, ap);
-        va_end(ap);
-    }
-
-    if (nchars < 0) return nchars;
-    return size;
-}
-#endif
-#endif
-
 #define ARGS_ADD_ARGV(FMT,ARG) \
   argv=(char**) realloc((void*)argv, (argc+2)*sizeof(char*)); \
   asprintf(&argv[argc++], FMT, ARG); argv[argc] = 0;
-- 
2.46.0

